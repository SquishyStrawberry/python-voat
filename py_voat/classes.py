#!/usr/bin/env python3
import requests
import time
from collections import namedtuple
from datetime import datetime
from py_voat.exceptions import *
from py_voat.constants import *

# placeholders while I implement actual classes
# Submission = namedtuple("Submission", "title content comments author id is_url")
Comment = namedtuple("Comment", "content author id")
Message = namedtuple("Message", "title content author id")


# noinspection PyAttributeOutsideInit
class AuthToken(object):

    """
    Small holder class for Voat's Auth Tokens.
    Built to be able to raise an exception when a token is expired.
    """

    def __init__(self, username, token, token_type, expiry_date):
        if isinstance(expiry_date, str):
            if expiry_date.isdigit():
                expiry_date = int(expiry_date)
        if not isinstance(expiry_date, int):
            raise VoatBadExpiry("Bad expiry date, must be int!")
        self.username = username
        self.expiry_date = expiry_date
        self.gotten_at = time.time()
        self.token_type = token_type
        self.token = token

    @classmethod
    def get_auth(cls, username, password, api_key):
        req = requests.post(base_url + "/api/token",
                            headers={
                                "Voat-ApiKey": api_key,
                                "Content-Type": "application/x-www-form-urlencoded"
                            },
                            data={
                                "grant_type": "password",
                                "username": username,
                                "password": password
                            })
        if req.ok:
            req_json = req.json()
            return cls(req_json["userName"],
                       req_json["access_token"],
                       req_json["token_type"],
                       req_json["expires_in"])

    @property
    def token(self):
        if time.time() >= self.gotten_at + self.expiry_date:
            raise VoatExpiredToken("This token is expired!")
        else:
            return self._token

    @token.setter
    def token(self, val):
        self._token = val

    @property
    def headers(self):
        return {
            "Authorization": "{} {}".format(self.token_type.capitalize(),
                                            self.token)
        }

class Submission(object):
    """
    Holder class for Voat Submissions.
    Can be either generated by hand, or with Submission.from_dict
    """

    def __init__(self, **kwargs):
        """
        Initializes a Submission instance.
        Args were chosen to be KwArgs as they would otherwise be too long.
        Here is a list of what is used in Submission.from_dict:
            * title: The title of the post, obviously.
            * content: Either the content of the post, or the url it links to.
            * comments: The comments of the post, that are actually fetched later.
            * author: Who posted the post.
            * id: The UNIQUE id of the post.
            * subverse: The subverse in which it was posted
            * karma: How many upvotes the post has.
            * views: How many times the post has been viewed.
            * date: A datetime.datetime instance of when the post was posted.
            * voat: An instance of Voat.
            * is_url: If the post's content is text or a link.
        """
        for k, v in kwargs.items():
            setattr(self, k, v)

    @classmethod
    def from_dict(cls, json_data, voat_instance=None):
        date = json_data.get("date") or None
        if date is not None:
            # I need to figure out a way to get the format second.microsecond
            datetime.strptime(date.split(".")[0], "%Y-%m-%dT%H:%M:%S")
        inst = cls(title=json_data.get("title", ""),
                   content=json_data.get("content", ""),
                   comments=None,  # No way to get comments from JSON.
                   author=json_data.get("userName", ""),
                   post_id=json_data.get("id", -1),
                   subverse=json_data.get("subverse", ""),
                   karma=json_data.get("upVotes", -1),
                   views=json_data.get("views", -1),
                   date=date,
                   voat=voat_instance,
                   is_url=bool(json_data.get("url")))
        return inst

    @property
    def comments(self):
        if self._comments is None and getattr(self, "voat", None) is not None:
            self._comments = self.voat.fetch_comments(getattr(self, "post_id", 0),
                                                      getattr(self, "subverse", None))
        return self._comments

    @comments.setter
    def comments(self, val):
        self._comments = val
